//Domain
import IoTDeviceData, { IoTDeviceDataPrimitives } from '../../domain/IoTDeviceData';
//Domain events
import CreatedIoTDeviceData from '../../domain/events/CreatedIoTDeviceData';
//Shared domain
import DomainEventsHandler from '../../../Shared/domain/events/DomainEventsHandler';
//Data repository contract
import { IoTDeviceDataRepository } from '../../domain/IoTDeviceDataRepository';

/**
 * @author Damián Alanís Ramírez
 * @version 2.3.1
 * @description Create IoTDeviceData record use case.
 */
export default class CreateIoTDeviceData {
    private readonly iotDeviceDataRepository: IoTDeviceDataRepository;

    constructor(iotDeviceDataRepository: IoTDeviceDataRepository) {
        this.iotDeviceDataRepository = iotDeviceDataRepository;
    }

    /**
     * Entry point for the use case.
     * @param {string} key Name of the data parameter.
     * @param {strin|Object} value Value of the entry to save.
     * @returns 
     */
    run = async ({ 
        key,
        value,
        deviceId,
        filePath
    }: IoTDeviceDataPrimitives) => {
        //We create the data record from the essential primitive values, the id and the issuedAt attributes are going to be generated by IoTDeviceData itself
        const deviceDataRecord: IoTDeviceData = IoTDeviceData.fromPrimitives({ key, value, deviceId, filePath });
        //We save the data record to the repository
        await this.iotDeviceDataRepository.create(deviceDataRecord);
        //We generate and dispatch the event
        deviceDataRecord.addDomainEvent(new CreatedIoTDeviceData(deviceDataRecord));
        DomainEventsHandler.dispatchEventsForAggregate(deviceDataRecord.id);
        //Finally, we return the user
        return deviceDataRecord;
    }
}